name: Download & Extract OpenWrt RootFS

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'URL firmware OpenWrt (.img, .tar.gz, .tar.xz)'
        required: true
        default: ''

jobs:
  extract-rootfs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y binwalk squashfs-tools wget curl p7zip-full aria2 xz-utils npm
        sudo npm install -g megatools
        sudo apt-get install -y gdown

    - name: Download firmware
      run: |
        URL="${{ github.event.inputs.firmware_url }}"
        echo "Downloading firmware from $URL"

        if [[ "$URL" == *"drive.google.com"* ]]; then
          gdown "$URL" -O firmware
        elif [[ "$URL" == *"mega.nz"* ]]; then
          megadl "$URL" --path ./firmware
        elif [[ "$URL" == *"mediafire.com"* ]]; then
          wget -O firmware "$URL"
        elif [[ "$URL" == *"terabox.com"* ]]; then
          aria2c -o firmware "$URL"
        else
          wget -O firmware "$URL"
        fi

    - name: Detect firmware type
      run: |
        EXT="${URL##*.}"
        echo "Extension: $EXT"
        if [[ "$EXT" == "gz" ]]; then
          echo "tar.gz" > type.txt
        elif [[ "$EXT" == "xz" ]]; then
          echo "tar.xz" > type.txt
        elif [[ "$EXT" == "img" ]]; then
          echo "img" > type.txt
        else
          echo "unknown" > type.txt
        fi

    - name: Extract firmware
      run: |
        TYPE=$(cat type.txt)
        mkdir rootfs
        if [ "$TYPE" == "tar.gz" ]; then
          tar -xzf firmware -C rootfs
        elif [ "$TYPE" == "tar.xz" ]; then
          tar -xJf firmware -C rootfs
        elif [ "$TYPE" == "img" ]; then
          binwalk -e firmware
          if [ -f "_firmware.extracted/squashfs-root.squashfs" ]; then
            unsquashfs -d rootfs _firmware.extracted/squashfs-root.squashfs
          else
            echo "No squashfs found, check firmware format!"
            exit 1
          fi
        else
          echo "Unsupported firmware format"
          exit 1
        fi

    - name: Compress rootfs
      run: |
        tar -czvf rootfs.tar.gz -C rootfs .

    - name: Upload rootfs artifact
      uses: actions/upload-artifact@v4
      with:
        name: rootfs
        path: rootfs.tar.gz
        
